/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var LupGrammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[5,22,26],$V3=[1,19],$V4=[1,20],$V5=[1,25],$V6=[1,27],$V7=[15,19],$V8=[42,44],$V9=[1,35],$Va=[1,37],$Vb=[24,25,37,39],$Vc=[1,39],$Vd=[1,45],$Ve=[1,54],$Vf=[55,57],$Vg=[62,63,68],$Vh=[1,81],$Vi=[67,68],$Vj=[1,94],$Vk=[36,67,68],$Vl=[79,81],$Vm=[73,75],$Vn=[62,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"PAQUETES":4,"EOF":5,"QUERYS":6,"QUERY":7,"PAQUETELOGIN":8,"PAQUETELOGOUT":9,"PAQUETESTRUC":10,"PAQUETEMESSAGE":11,"PAQUETEERROR":12,"loginA":13,"RESULTLOGIN":14,"loginC":15,"success":16,"fail":17,"logoutA":18,"logoutC":19,"LISTAERRORES":20,"LISTAMENSAJES":21,"mensajeA":22,"CUERPOMENSAJE":23,"mensajeC":24,"data":25,"errorA":26,"FILA":27,"COLUMNA":28,"TIPO":29,"DESCRIPCION":30,"FECHA":31,"errorC":32,"lineA":33,"ENTERO":34,"lineC":35,"descripcionA":36,"descripcionC":37,"dateA":38,"dateC":39,"databasesA":40,"LISTABASES":41,"databasesC":42,"BASE":43,"databaseA":44,"NOMBRE":45,"TABLAS":46,"TIPOS":47,"PROCEDURES":48,"databaseC":49,"nameA":50,"Identificador":51,"nameC":52,"tablesA":53,"LISTATABLAS":54,"tablesC":55,"TABLA":56,"tableA":57,"COLUMNAS":58,"tableC":59,"columnsA":60,"LISTACOLUMNAS":61,"columnsC":62,"columnA":63,"columnC":64,"typesA":65,"LISTATIPOS":66,"typesC":67,"typeA":68,"ATRIBUTOS":69,"typeC":70,"attributesA":71,"LISTAATRIBUTOS":72,"attributesC":73,"ATRIBUTO":74,"attributeA":75,"attributeC":76,"proceduresA":77,"LISTAPROCEDURES":78,"proceduresC":79,"PROC":80,"procedureA":81,"procedureC":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"loginA",15:"loginC",16:"success",17:"fail",18:"logoutA",19:"logoutC",22:"mensajeA",24:"mensajeC",25:"data",26:"errorA",32:"errorC",33:"lineA",34:"ENTERO",35:"lineC",36:"descripcionA",37:"descripcionC",38:"dateA",39:"dateC",40:"databasesA",42:"databasesC",44:"databaseA",49:"databaseC",50:"nameA",51:"Identificador",52:"nameC",53:"tablesA",55:"tablesC",57:"tableA",59:"tableC",60:"columnsA",62:"columnsC",63:"columnA",64:"columnC",65:"typesA",67:"typesC",68:"typeA",70:"typeC",71:"attributesA",73:"attributesC",75:"attributeA",76:"attributeC",77:"proceduresA",79:"proceduresC",81:"procedureA",82:"procedureC"},
productions_: [0,[3,2],[3,2],[6,2],[6,1],[4,1],[4,1],[4,1],[7,1],[7,1],[8,3],[14,1],[14,1],[9,3],[20,1],[21,1],[11,3],[23,2],[23,1],[12,7],[27,3],[30,3],[31,3],[10,3],[10,2],[41,2],[41,1],[43,6],[45,3],[46,3],[46,2],[54,2],[54,1],[56,4],[56,2],[56,3],[58,3],[61,2],[61,1],[28,3],[28,3],[47,3],[47,2],[66,2],[66,1],[29,4],[29,3],[69,3],[69,2],[72,2],[72,1],[74,3],[48,3],[48,2],[78,2],[78,1],[80,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2:
return $$[$0-1];
break;
case 3: case 25: case 31: case 37: case 43: case 49: case 54:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 4: case 14: case 15: case 26: case 32: case 38: case 44: case 50: case 55:
this.$ = [$$[$0]];
break;
case 5: case 6: case 7: case 18:
this.$ = $$[$0];
break;
case 8:
this.$ = {"mensaje":$$[$0]};
break;
case 9:
this.$ = {"error":$$[$0]};
break;
case 10: case 16: case 20: case 21: case 22: case 23: case 28: case 29: case 36: case 39: case 40: case 41: case 46: case 47: case 51: case 56:
this.$ = $$[$0-1];
break;
case 11:
this.$ = true;
break;
case 12:
this.$ = false;
break;
case 13:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 17:
this.$ = $$[$0-1] + $$[$0];
break;
case 19:
this.$ = {"fila": $$[$0-5], "columna": $$[$0-4], "tipo": $$[$0-3], "descripcion": $$[$0-2], "fecha": $$[$0-1]};
break;
case 24: case 30: case 34: case 42: case 48: case 53:
this.$ = [];
break;
case 27:
this.$ = {base: {nombre: $$[$0-4], tablas: $$[$0-3], tipos: $$[$0-2], procedures: $$[$0-1]}};
break;
case 33:
this.$ = {tabla: {nombre: $$[$0-2], columnas: $$[$0-1]}};
break;
case 35:
this.$ = {tabla: {nombre: $$[$0-1], columnas: []}};
break;
case 45:
this.$ = {tipo : { nombre: $$[$0-2], atributos: $$[$0-1]}};
break;
case 52:
this.$ = {procedimientos: $$[$0-1]};
break;
}
},
table: [{3:1,4:2,6:3,7:7,8:4,9:5,10:6,11:11,12:12,13:[1,8],18:[1,9],22:$V0,26:$V1,40:[1,10]},{1:[3]},{5:[1,15]},{5:[1,16],7:17,11:11,12:12,22:$V0,26:$V1},{5:[2,5]},{5:[2,6]},{5:[2,7]},o($V2,[2,4]),{14:18,16:$V3,17:$V4},{14:21,16:$V3,17:$V4},{41:22,42:[1,23],43:24,44:$V5},o($V2,[2,8]),o($V2,[2,9]),{23:26,25:$V6},{27:28,33:[1,29]},{1:[2,1]},{1:[2,2]},o($V2,[2,3]),{15:[1,30]},o($V7,[2,11]),o($V7,[2,12]),{19:[1,31]},{42:[1,32],43:33,44:$V5},{5:[2,24]},o($V8,[2,26]),{45:34,50:$V9},{24:[1,36],25:$Va},o($Vb,[2,18]),{28:38,63:$Vc},{34:[1,40]},{5:[2,10]},{5:[2,13]},{5:[2,23]},o($V8,[2,25]),{46:41,53:[1,42]},{51:[1,43]},o($V2,[2,16]),o($Vb,[2,17]),{29:44,68:$Vd},{34:[1,47],51:[1,46]},{35:[1,48]},{47:49,65:[1,50]},{54:51,55:[1,52],56:53,57:$Ve},{52:[1,55]},{30:56,36:[1,57]},{45:58,50:$V9,51:[1,59]},{64:[1,60]},{64:[1,61]},{63:[2,20]},{48:62,77:[1,63]},{29:66,66:64,67:[1,65],68:$Vd},{55:[1,67],56:68,57:$Ve},{65:[2,30]},o($Vf,[2,32]),{45:69,50:$V9,59:[1,70]},o([53,59,60,71],[2,28]),{31:71,38:[1,72]},{23:73,25:$V6},{69:74,71:[1,75]},{70:[1,76]},o($Vg,[2,39]),o($Vg,[2,40]),{49:[1,77]},{78:78,79:[1,79],80:80,81:$Vh},{29:83,67:[1,82],68:$Vd},{77:[2,42]},o($Vi,[2,44]),{65:[2,29]},o($Vf,[2,31]),{58:84,59:[1,85],60:[1,86]},o($Vf,[2,34]),{32:[1,87]},{23:88,25:$V6},{25:$Va,37:[1,89]},{70:[1,90]},{72:91,73:[1,92],74:93,75:$Vj},o($Vk,[2,46]),o($V8,[2,27]),{79:[1,95],80:96,81:$Vh},{49:[2,53]},o($Vl,[2,55]),{51:[1,97]},{77:[2,41]},o($Vi,[2,43]),{59:[1,98]},o($Vf,[2,35]),{28:100,61:99,63:$Vc},o($V2,[2,19]),{25:$Va,39:[1,101]},{38:[2,21]},o($Vk,[2,45]),{73:[1,102],74:103,75:$Vj},{70:[2,48]},o($Vm,[2,50]),{51:[1,104]},{49:[2,52]},o($Vl,[2,54]),{82:[1,105]},o($Vf,[2,33]),{28:107,62:[1,106],63:$Vc},o($Vn,[2,38]),{32:[2,22]},{70:[2,47]},o($Vm,[2,49]),{76:[1,108]},o($Vl,[2,56]),{59:[2,36]},o($Vn,[2,37]),o($Vm,[2,51])],
defaultActions: {4:[2,5],5:[2,6],6:[2,7],15:[2,1],16:[2,2],23:[2,24],30:[2,10],31:[2,13],32:[2,23],48:[2,20],52:[2,30],65:[2,42],67:[2,29],79:[2,53],82:[2,41],89:[2,21],92:[2,48],95:[2,52],101:[2,22],102:[2,47],106:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 51
break;
case 2:return 'DataRegex'
break;
case 3:return 'PasswordRegex'
break;
case 4:return 'DescRegex'
break;
case 5:return 'DateRegex'
break;
case 6:return 34
break;
case 7:return 13
break;
case 8:return 15
break;
case 9:return 18
break;
case 10:return 19
break;
case 11:return 16
break;
case 12:return 17
break;
case 13:return 40
break;
case 14:return 42
break;
case 15:return 44
break;
case 16:return 49
break;
case 17:return 50
break;
case 18:return 52
break;
case 19:return 53
break;
case 20:return 55
break;
case 21:return 57
break;
case 22:return 59
break;
case 23:return 60
break;
case 24:return 62 
break;
case 25:return 63
break;
case 26:return 64 
break;
case 27:return 62 
break;
case 28:return 75
break;
case 29:return 76 
break;
case 30:return 68
break;
case 31:return 70
break;
case 32:return 65
break;
case 33:return 67
break;
case 34:return 71
break;
case 35:return 73
break;
case 36:return 77
break;
case 37:return 79
break;
case 38:return 81
break;
case 39:return 82
break;
case 40:return 33
break;
case 41:return 35
break;
case 42:return 26
break;
case 43:return 32
break;
case 44:this.begin("mensaje"); return "mensajeA";
break;
case 45:this.begin("INITIAL"); return "mensajeC";
break;
case 46:return 25;
break;
case 47:return 25;
break;
case 48:this.begin("descripcion"); return "descripcionA";
break;
case 49:this.begin("INITIAL"); return "descripcionC";
break;
case 50:return 25;
break;
case 51:return 25;
break;
case 52:this.begin("fecha"); return "dateA";
break;
case 53:this.begin("INITIAL"); return "dateC";
break;
case 54:return 25;
break;
case 55:return 25;
break;
case 56:return 5
break;
case 57:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:(\\[\\+DATA\\](.|\s)*\\[-DATA\\]))/,/^(?:(\\[\\+PASS\\](.|\s)*\\[-PASS\\]))/,/^(?:(\\[\\+DESC\\](.|\s)*\\[-DESC\\]))/,/^(?:(\\[\\+DATE\\](.|\s)*\\[-DATE\\]))/,/^(?:([0-9]+))/,/^(?:\[\+LOGIN\])/,/^(?:\[-LOGIN\])/,/^(?:\[\+LOGOUT\])/,/^(?:\[-LOGOUT\])/,/^(?:\[SUCCESS\])/,/^(?:\[FAIL\])/,/^(?:\[\+DATABASES\])/,/^(?:\[-DATABASES\])/,/^(?:\[\+DATABASE\])/,/^(?:\[-DATABASE\])/,/^(?:\[\+NAME\])/,/^(?:\[-NAME\])/,/^(?:\[\+TABLES\])/,/^(?:\[-TABLES\])/,/^(?:\[\+TABLE\])/,/^(?:\[-TABLE\])/,/^(?:\[\+COLUMNS\])/,/^(?:\[-COLUMNS\])/,/^(?:\[\+COLUMN\])/,/^(?:\[-COLUMN\])/,/^(?:\[-COLUMNS\])/,/^(?:\[\+ATTRIBUTE\])/,/^(?:\[-ATTRIBUTE\])/,/^(?:\[\+TYPE\])/,/^(?:\[-TYPE\])/,/^(?:\[\+TYPES\])/,/^(?:\[-TYPES\])/,/^(?:\[\+ATTRIBUTES\])/,/^(?:\[-ATTRIBUTES\])/,/^(?:\[\+PROCEDURES\])/,/^(?:\[-PROCEDURES\])/,/^(?:\[\+PROCEDURE\])/,/^(?:\[-PROCEDURE\])/,/^(?:\[\+LINE\])/,/^(?:\[-LINE\])/,/^(?:\[\+ERROR\])/,/^(?:\[-ERROR\])/,/^(?:\[\+MESSAGE\])/,/^(?:\[-MESSAGE\])/,/^(?:.)/,/^(?:\s)/,/^(?:\[\+DESC\])/,/^(?:\[-DESC\])/,/^(?:.)/,/^(?:\s)/,/^(?:\[\+DATE\])/,/^(?:\[-DATE\])/,/^(?:.)/,/^(?:\s)/,/^(?:$)/,/^(?:.)/],
conditions: {"mensaje":{"rules":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,56,57],"inclusive":true},"descripcion":{"rules":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,48,49,50,51,52,56,57],"inclusive":true},"fecha":{"rules":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,48,52,53,54,55,56,57],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,48,52,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = LupGrammar;
exports.Parser = LupGrammar.Parser;
exports.parse = function () { return LupGrammar.parse.apply(LupGrammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}